# Task ID: 4
# Title: Headless WordPress API 연동 설정 (Configure Headless WordPress API Integration)
# Status: pending
# Dependencies: None
# Priority: high
# Description: 웹사이트에서 Headless WordPress의 데이터를 가져오기 위한 기본 연동 설정을 구축합니다.
# Details:
WordPress GraphQL 또는 REST API 엔드포인트 연결을 설정하고, 환경 변수를 사용하여 API URL을 안전하게 관리합니다. 지정된 카테고리별로 게시물 목록을 조회하는 기본 데이터 fetching 함수를 구현합니다.

# Test Strategy:
API 클라이언트(예: Postman)나 테스트 스크립트를 사용하여 특정 카테고리 ID로 게시물 데이터를 성공적으로 가져오는지 확인하고, 반환되는 데이터의 구조를 검증합니다.

# Subtasks:
## 1. API 방식 결정 및 WordPress 플러그인 설치 (Decide on API method and install WordPress plugins) [pending]
### Dependencies: None
### Description: 프로젝트 요구사항에 맞춰 REST API와 GraphQL 중 사용할 API 방식을 결정합니다. GraphQL을 사용하기로 결정한 경우, WordPress에 WPGraphQL 플러그인을 설치하고 활성화합니다.
### Details:
REST API는 WordPress에 기본 내장되어 있으며, GraphQL은 추가 플러그인 설치가 필요합니다. 데이터 요청의 유연성과 성능을 고려하여 적합한 방식을 선택합니다.
<info added on 2025-09-02T11:12:45.545Z>


결정 사항: WordPress에 기본 내장된 REST API를 사용합니다. 별도의 GraphQL 플러그인 설치는 필요하지 않습니다.
</info added on 2025-09-02T11:12:45.545Z>

## 2. API 엔드포인트 환경 변수 설정 (Configure API endpoint environment variables) [pending]
### Dependencies: 4.1
### Description: 프론트엔드 프로젝트의 .env 파일에 WordPress API URL을 환경 변수로 추가하여 관리합니다. 이를 통해 소스 코드에서 URL을 분리하여 보안과 관리 용이성을 높입니다.
### Details:
NEXT_PUBLIC_WORDPRESS_API_URL과 같은 명확한 변수명을 사용합니다. 개발, 스테이징, 프로덕션 환경별로 다른 엔드포인트를 설정할 수 있도록 .env.local, .env.development 등의 파일을 활용합니다.
<info added on 2025-08-31T05:55:10.982Z>
Vite 프로젝트(`seongrim`)의 루트에 `.env.local` 파일을 생성하고, 다음과 같이 환경 변수를 설정합니다. Vite의 규칙에 따라 클라이언트 사이드에서 변수에 접근할 수 있도록 `VITE_` 접두사를 사용합니다.
```
VITE_API_URL=https://api.seongrim.o-r.kr/wp-json
```


## 3. 프론트엔드 API 클라이언트 모듈 생성 (Create a frontend API client module) [pending]
### Dependencies: 4.2
### Description: API 요청을 중앙에서 처리하기 위한 재사용 가능한 API 클라이언트 모듈을 생성합니다. 이 모듈은 환경 변수에서 API URL을 읽어와 요청의 기본 설정을 담당합니다.
### Details:
axios 또는 fetch API를 사용하여 클라이언트를 구현합니다. GraphQL의 경우, Apollo Client나 graphql-request와 같은 라이브러리를 설정하여 쿼리를 쉽게 보낼 수 있도록 구성합니다.
<info added on 2025-09-02T11:13:12.985Z>
프로젝트에 이미 `axios`가 의존성으로 설정되어 있으므로, `axios`를 사용하여 구현합니다.
</info added on 2025-09-02T11:13:12.985Z>

## 4. 카테고리별 게시물 조회 데이터 fetching 함수 구현 (Implement data fetching function for posts by category) [pending]
### Dependencies: 4.3
### Description: 특정 카테고리 ID를 인자로 받아, 해당 카테고리에 속한 게시물 목록을 조회하는 비동기 함수(예: getPostsByCategory)를 API 클라이언트 모듈을 사용하여 구현합니다.
### Details:
REST API의 경우 `/wp/v2/posts?categories=<id>` 엔드포인트를, GraphQL의 경우 `posts(where: { categoryId: <id> })`와 같은 쿼리를 사용합니다. 함수는 후속 작업(Task 5)에 필요한 필드(제목, 날짜, 요약 등)를 포함하여 반환해야 합니다.
<info added on 2025-09-02T11:13:39.550Z>
초기 구현 시, 함수는 각 게시물에 대해 다음 필드를 우선적으로 가져와야 합니다: `id`, `title`, `content`, `excerpt`, `date`, `author`, `featured_media`. 또한, 향후 다른 필드가 필요할 경우 쉽게 추가할 수 있도록 확장성을 고려하여 설계해야 합니다.
</info added on 2025-09-02T11:13:39.550Z>

## 5. API 응답 데이터 타입 정의 및 최종 연동 테스트 (Define API response types and conduct final integration test) [pending]
### Dependencies: 4.4
### Description: API로부터 반환되는 게시물 데이터의 구조에 맞춰 TypeScript 인터페이스 또는 JSDoc 타입을 정의하여 코드의 안정성을 확보합니다. 구현된 fetching 함수를 실제로 호출하여 전체 연동 과정을 테스트합니다.
### Details:
Postman과 같은 도구로 실제 API 응답을 확인하고, 이를 기반으로 'Post' 타입을 정의합니다. 이 타입은 getPostsByCategory 함수의 반환 타입으로 명시하여 타입 안정성을 높입니다.
<info added on 2025-09-02T11:14:25.045Z>
프로젝트가 JavaScript로 진행되므로, TypeScript 인터페이스 대신 JSDoc 주석을 활용하여 API 응답 데이터 타입을 정의합니다. 이를 통해 코드 안정성과 개발자 경험을 향상시킵니다.
</info added on 2025-09-02T11:14:25.045Z>

